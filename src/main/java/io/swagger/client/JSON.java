/*
 * Ranger REST API
 * Apache Ranger is a framework to enable, monitor and manage comprehensive data security across the Hadoop platform. Apache Ranger currently provides a centralized security adminstration, fine grain access control and detailed auditing for user access within Apache Hadoop, Apache Hive, Apache HBase and other Apache components
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import io.swagger.client.model.*;
import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(JsonRangerBaseModelObject.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_GroupInfo".toUpperCase(), JsonGroupInfo.class);
                classByDiscriminatorValue.put("json_RangerPolicy".toUpperCase(), JsonRangerPolicy.class);
                classByDiscriminatorValue.put("json_RangerRole".toUpperCase(), JsonRangerRole.class);
                classByDiscriminatorValue.put("json_RangerSecurityZone".toUpperCase(), JsonRangerSecurityZone.class);
                classByDiscriminatorValue.put("json_RangerService".toUpperCase(), JsonRangerService.class);
                classByDiscriminatorValue.put("json_RangerServiceDef".toUpperCase(), JsonRangerServiceDef.class);
                classByDiscriminatorValue.put("json_RangerServiceResource".toUpperCase(), JsonRangerServiceResource.class);
                classByDiscriminatorValue.put("json_RangerTag".toUpperCase(), JsonRangerTag.class);
                classByDiscriminatorValue.put("json_RangerTagDef".toUpperCase(), JsonRangerTagDef.class);
                classByDiscriminatorValue.put("json_RangerTagResourceMap".toUpperCase(), JsonRangerTagResourceMap.class);
                classByDiscriminatorValue.put("json_UserInfo".toUpperCase(), JsonUserInfo.class);
                classByDiscriminatorValue.put("JsonRangerBaseModelObject".toUpperCase(), JsonRangerBaseModelObject.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonRangerPolicy.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_RangerAuditPolicy".toUpperCase(), JsonRangerAuditPolicy.class);
                classByDiscriminatorValue.put("JsonRangerPolicy".toUpperCase(), JsonRangerPolicy.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonRangerPolicyItem.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_RangerAuditPolicyItem".toUpperCase(), JsonRangerAuditPolicyItem.class);
                classByDiscriminatorValue.put("json_RangerDataMaskPolicyItem".toUpperCase(), JsonRangerDataMaskPolicyItem.class);
                classByDiscriminatorValue.put("json_RangerRowFilterPolicyItem".toUpperCase(), JsonRangerRowFilterPolicyItem.class);
                classByDiscriminatorValue.put("JsonRangerPolicyItem".toUpperCase(), JsonRangerPolicyItem.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonRangerPolicyList.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_RangerExportPolicyList".toUpperCase(), JsonRangerExportPolicyList.class);
                classByDiscriminatorValue.put("JsonRangerPolicyList".toUpperCase(), JsonRangerPolicyList.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonVList.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_RangerPluginInfoList".toUpperCase(), JsonRangerPluginInfoList.class);
                classByDiscriminatorValue.put("json_RangerPolicyList".toUpperCase(), JsonRangerPolicyList.class);
                classByDiscriminatorValue.put("json_RangerRoleList".toUpperCase(), JsonRangerRoleList.class);
                classByDiscriminatorValue.put("json_RangerSecurityZoneList".toUpperCase(), JsonRangerSecurityZoneList.class);
                classByDiscriminatorValue.put("json_RangerServiceDefList".toUpperCase(), JsonRangerServiceDefList.class);
                classByDiscriminatorValue.put("json_RangerServiceList".toUpperCase(), JsonRangerServiceList.class);
                classByDiscriminatorValue.put("json_VXAccessAuditList".toUpperCase(), JsonVXAccessAuditList.class);
                classByDiscriminatorValue.put("json_VXAssetList".toUpperCase(), JsonVXAssetList.class);
                classByDiscriminatorValue.put("json_VXAuditMapList".toUpperCase(), JsonVXAuditMapList.class);
                classByDiscriminatorValue.put("json_VXAuditRecordList".toUpperCase(), JsonVXAuditRecordList.class);
                classByDiscriminatorValue.put("json_VXAuthSessionList".toUpperCase(), JsonVXAuthSessionList.class);
                classByDiscriminatorValue.put("json_VXCredentialStoreList".toUpperCase(), JsonVXCredentialStoreList.class);
                classByDiscriminatorValue.put("json_VXGroupGroupList".toUpperCase(), JsonVXGroupGroupList.class);
                classByDiscriminatorValue.put("json_VXGroupList".toUpperCase(), JsonVXGroupList.class);
                classByDiscriminatorValue.put("json_VXGroupPermissionList".toUpperCase(), JsonVXGroupPermissionList.class);
                classByDiscriminatorValue.put("json_VXGroupUserList".toUpperCase(), JsonVXGroupUserList.class);
                classByDiscriminatorValue.put("json_VXKmsKeyList".toUpperCase(), JsonVXKmsKeyList.class);
                classByDiscriminatorValue.put("json_VXModuleDefList".toUpperCase(), JsonVXModuleDefList.class);
                classByDiscriminatorValue.put("json_VXPermMapList".toUpperCase(), JsonVXPermMapList.class);
                classByDiscriminatorValue.put("json_VXPermObjList".toUpperCase(), JsonVXPermObjList.class);
                classByDiscriminatorValue.put("json_VXPolicyExportAuditList".toUpperCase(), JsonVXPolicyExportAuditList.class);
                classByDiscriminatorValue.put("json_VXPolicyLabelList".toUpperCase(), JsonVXPolicyLabelList.class);
                classByDiscriminatorValue.put("json_VXPolicyList".toUpperCase(), JsonVXPolicyList.class);
                classByDiscriminatorValue.put("json_VXPortalUserList".toUpperCase(), JsonVXPortalUserList.class);
                classByDiscriminatorValue.put("json_VXRepositoryList".toUpperCase(), JsonVXRepositoryList.class);
                classByDiscriminatorValue.put("json_VXResourceList".toUpperCase(), JsonVXResourceList.class);
                classByDiscriminatorValue.put("json_VXStringList".toUpperCase(), JsonVXStringList.class);
                classByDiscriminatorValue.put("json_VXTrxLogList".toUpperCase(), JsonVXTrxLogList.class);
                classByDiscriminatorValue.put("json_VXUgsyncAuditInfoList".toUpperCase(), JsonVXUgsyncAuditInfoList.class);
                classByDiscriminatorValue.put("json_VXUserList".toUpperCase(), JsonVXUserList.class);
                classByDiscriminatorValue.put("json_VXUserPermissionList".toUpperCase(), JsonVXUserPermissionList.class);
                classByDiscriminatorValue.put("JsonVList".toUpperCase(), JsonVList.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonRangerAccessResourceImpl.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_RangerTagResource".toUpperCase(), JsonRangerTagResource.class);
                classByDiscriminatorValue.put("JsonRangerAccessResourceImpl".toUpperCase(), JsonRangerAccessResourceImpl.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonHttpEntity.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_ResponseEntityOfList".toUpperCase(), JsonResponseEntityOfList.class);
                classByDiscriminatorValue.put("JsonHttpEntity".toUpperCase(), JsonHttpEntity.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonViewBaseBean.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_VEnum".toUpperCase(), JsonVEnum.class);
                classByDiscriminatorValue.put("json_VEnumElement".toUpperCase(), JsonVEnumElement.class);
                classByDiscriminatorValue.put("json_VList".toUpperCase(), JsonVList.class);
                classByDiscriminatorValue.put("json_VTrxLogAttr".toUpperCase(), JsonVTrxLogAttr.class);
                classByDiscriminatorValue.put("json_VXDataObject".toUpperCase(), JsonVXDataObject.class);
                classByDiscriminatorValue.put("json_VXLong".toUpperCase(), JsonVXLong.class);
                classByDiscriminatorValue.put("json_VXMessage".toUpperCase(), JsonVXMessage.class);
                classByDiscriminatorValue.put("json_VXPasswordChange".toUpperCase(), JsonVXPasswordChange.class);
                classByDiscriminatorValue.put("json_VXResponse".toUpperCase(), JsonVXResponse.class);
                classByDiscriminatorValue.put("json_VXString".toUpperCase(), JsonVXString.class);
                classByDiscriminatorValue.put("JsonViewBaseBean".toUpperCase(), JsonViewBaseBean.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonVXDataObject.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_VXAccessAudit".toUpperCase(), JsonVXAccessAudit.class);
                classByDiscriminatorValue.put("json_VXAsset".toUpperCase(), JsonVXAsset.class);
                classByDiscriminatorValue.put("json_VXAuditMap".toUpperCase(), JsonVXAuditMap.class);
                classByDiscriminatorValue.put("json_VXAuthSession".toUpperCase(), JsonVXAuthSession.class);
                classByDiscriminatorValue.put("json_VXCredentialStore".toUpperCase(), JsonVXCredentialStore.class);
                classByDiscriminatorValue.put("json_VXGroup".toUpperCase(), JsonVXGroup.class);
                classByDiscriminatorValue.put("json_VXGroupGroup".toUpperCase(), JsonVXGroupGroup.class);
                classByDiscriminatorValue.put("json_VXGroupPermission".toUpperCase(), JsonVXGroupPermission.class);
                classByDiscriminatorValue.put("json_VXGroupUser".toUpperCase(), JsonVXGroupUser.class);
                classByDiscriminatorValue.put("json_VXGroupUserInfo".toUpperCase(), JsonVXGroupUserInfo.class);
                classByDiscriminatorValue.put("json_VXKmsKey".toUpperCase(), JsonVXKmsKey.class);
                classByDiscriminatorValue.put("json_VXModuleDef".toUpperCase(), JsonVXModuleDef.class);
                classByDiscriminatorValue.put("json_VXPermMap".toUpperCase(), JsonVXPermMap.class);
                classByDiscriminatorValue.put("json_VXPolicy".toUpperCase(), JsonVXPolicy.class);
                classByDiscriminatorValue.put("json_VXPolicyExportAudit".toUpperCase(), JsonVXPolicyExportAudit.class);
                classByDiscriminatorValue.put("json_VXPolicyLabel".toUpperCase(), JsonVXPolicyLabel.class);
                classByDiscriminatorValue.put("json_VXPortalUser".toUpperCase(), JsonVXPortalUser.class);
                classByDiscriminatorValue.put("json_VXRepository".toUpperCase(), JsonVXRepository.class);
                classByDiscriminatorValue.put("json_VXResource".toUpperCase(), JsonVXResource.class);
                classByDiscriminatorValue.put("json_VXTrxLog".toUpperCase(), JsonVXTrxLog.class);
                classByDiscriminatorValue.put("json_VXUgsyncAuditInfo".toUpperCase(), JsonVXUgsyncAuditInfo.class);
                classByDiscriminatorValue.put("json_VXUser".toUpperCase(), JsonVXUser.class);
                classByDiscriminatorValue.put("json_VXUserGroupInfo".toUpperCase(), JsonVXUserGroupInfo.class);
                classByDiscriminatorValue.put("json_VXUserPermission".toUpperCase(), JsonVXUserPermission.class);
                classByDiscriminatorValue.put("JsonVXDataObject".toUpperCase(), JsonVXDataObject.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonXXAccessAuditBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_XXAccessAudit".toUpperCase(), JsonXXAccessAudit.class);
                classByDiscriminatorValue.put("json_XXAccessAuditV4".toUpperCase(), JsonXXAccessAuditV4.class);
                classByDiscriminatorValue.put("json_XXAccessAuditV5".toUpperCase(), JsonXXAccessAuditV5.class);
                classByDiscriminatorValue.put("JsonXXAccessAuditBase".toUpperCase(), JsonXXAccessAuditBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonXXDBBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_XXAccessAuditBase".toUpperCase(), JsonXXAccessAuditBase.class);
                classByDiscriminatorValue.put("json_XXAccessTypeDef".toUpperCase(), JsonXXAccessTypeDef.class);
                classByDiscriminatorValue.put("json_XXAccessTypeDefGrants".toUpperCase(), JsonXXAccessTypeDefGrants.class);
                classByDiscriminatorValue.put("json_XXAsset".toUpperCase(), JsonXXAsset.class);
                classByDiscriminatorValue.put("json_XXAuditMap".toUpperCase(), JsonXXAuditMap.class);
                classByDiscriminatorValue.put("json_XXAuthSession".toUpperCase(), JsonXXAuthSession.class);
                classByDiscriminatorValue.put("json_XXContextEnricherDef".toUpperCase(), JsonXXContextEnricherDef.class);
                classByDiscriminatorValue.put("json_XXCredentialStore".toUpperCase(), JsonXXCredentialStore.class);
                classByDiscriminatorValue.put("json_XXDataMaskTypeDef".toUpperCase(), JsonXXDataMaskTypeDef.class);
                classByDiscriminatorValue.put("json_XXEnumDef".toUpperCase(), JsonXXEnumDef.class);
                classByDiscriminatorValue.put("json_XXEnumElementDef".toUpperCase(), JsonXXEnumElementDef.class);
                classByDiscriminatorValue.put("json_XXGlobalStateBase".toUpperCase(), JsonXXGlobalStateBase.class);
                classByDiscriminatorValue.put("json_XXGroup".toUpperCase(), JsonXXGroup.class);
                classByDiscriminatorValue.put("json_XXGroupGroup".toUpperCase(), JsonXXGroupGroup.class);
                classByDiscriminatorValue.put("json_XXGroupPermission".toUpperCase(), JsonXXGroupPermission.class);
                classByDiscriminatorValue.put("json_XXGroupUser".toUpperCase(), JsonXXGroupUser.class);
                classByDiscriminatorValue.put("json_XXModuleDef".toUpperCase(), JsonXXModuleDef.class);
                classByDiscriminatorValue.put("json_XXPermMap".toUpperCase(), JsonXXPermMap.class);
                classByDiscriminatorValue.put("json_XXPolicyBase".toUpperCase(), JsonXXPolicyBase.class);
                classByDiscriminatorValue.put("json_XXPolicyConditionDef".toUpperCase(), JsonXXPolicyConditionDef.class);
                classByDiscriminatorValue.put("json_XXPolicyExportAudit".toUpperCase(), JsonXXPolicyExportAudit.class);
                classByDiscriminatorValue.put("json_XXPolicyItem".toUpperCase(), JsonXXPolicyItem.class);
                classByDiscriminatorValue.put("json_XXPolicyItemAccess".toUpperCase(), JsonXXPolicyItemAccess.class);
                classByDiscriminatorValue.put("json_XXPolicyItemCondition".toUpperCase(), JsonXXPolicyItemCondition.class);
                classByDiscriminatorValue.put("json_XXPolicyItemDataMaskInfo".toUpperCase(), JsonXXPolicyItemDataMaskInfo.class);
                classByDiscriminatorValue.put("json_XXPolicyItemGroupPerm".toUpperCase(), JsonXXPolicyItemGroupPerm.class);
                classByDiscriminatorValue.put("json_XXPolicyItemRowFilterInfo".toUpperCase(), JsonXXPolicyItemRowFilterInfo.class);
                classByDiscriminatorValue.put("json_XXPolicyItemUserPerm".toUpperCase(), JsonXXPolicyItemUserPerm.class);
                classByDiscriminatorValue.put("json_XXPolicyLabel".toUpperCase(), JsonXXPolicyLabel.class);
                classByDiscriminatorValue.put("json_XXPolicyLabelMap".toUpperCase(), JsonXXPolicyLabelMap.class);
                classByDiscriminatorValue.put("json_XXPolicyRefAccessType".toUpperCase(), JsonXXPolicyRefAccessType.class);
                classByDiscriminatorValue.put("json_XXPolicyRefCondition".toUpperCase(), JsonXXPolicyRefCondition.class);
                classByDiscriminatorValue.put("json_XXPolicyRefDataMaskType".toUpperCase(), JsonXXPolicyRefDataMaskType.class);
                classByDiscriminatorValue.put("json_XXPolicyRefGroup".toUpperCase(), JsonXXPolicyRefGroup.class);
                classByDiscriminatorValue.put("json_XXPolicyRefResource".toUpperCase(), JsonXXPolicyRefResource.class);
                classByDiscriminatorValue.put("json_XXPolicyRefRole".toUpperCase(), JsonXXPolicyRefRole.class);
                classByDiscriminatorValue.put("json_XXPolicyRefUser".toUpperCase(), JsonXXPolicyRefUser.class);
                classByDiscriminatorValue.put("json_XXPolicyResource".toUpperCase(), JsonXXPolicyResource.class);
                classByDiscriminatorValue.put("json_XXPolicyResourceMap".toUpperCase(), JsonXXPolicyResourceMap.class);
                classByDiscriminatorValue.put("json_XXPortalUser".toUpperCase(), JsonXXPortalUser.class);
                classByDiscriminatorValue.put("json_XXPortalUserRole".toUpperCase(), JsonXXPortalUserRole.class);
                classByDiscriminatorValue.put("json_XXRMSServiceResource".toUpperCase(), JsonXXRMSServiceResource.class);
                classByDiscriminatorValue.put("json_XXResource".toUpperCase(), JsonXXResource.class);
                classByDiscriminatorValue.put("json_XXResourceDef".toUpperCase(), JsonXXResourceDef.class);
                classByDiscriminatorValue.put("json_XXRoleBase".toUpperCase(), JsonXXRoleBase.class);
                classByDiscriminatorValue.put("json_XXRoleRefGroup".toUpperCase(), JsonXXRoleRefGroup.class);
                classByDiscriminatorValue.put("json_XXRoleRefRole".toUpperCase(), JsonXXRoleRefRole.class);
                classByDiscriminatorValue.put("json_XXRoleRefUser".toUpperCase(), JsonXXRoleRefUser.class);
                classByDiscriminatorValue.put("json_XXSecurityZoneBase".toUpperCase(), JsonXXSecurityZoneBase.class);
                classByDiscriminatorValue.put("json_XXSecurityZoneRefGroup".toUpperCase(), JsonXXSecurityZoneRefGroup.class);
                classByDiscriminatorValue.put("json_XXSecurityZoneRefResource".toUpperCase(), JsonXXSecurityZoneRefResource.class);
                classByDiscriminatorValue.put("json_XXSecurityZoneRefService".toUpperCase(), JsonXXSecurityZoneRefService.class);
                classByDiscriminatorValue.put("json_XXSecurityZoneRefTagService".toUpperCase(), JsonXXSecurityZoneRefTagService.class);
                classByDiscriminatorValue.put("json_XXSecurityZoneRefUser".toUpperCase(), JsonXXSecurityZoneRefUser.class);
                classByDiscriminatorValue.put("json_XXServiceBase".toUpperCase(), JsonXXServiceBase.class);
                classByDiscriminatorValue.put("json_XXServiceConfigDef".toUpperCase(), JsonXXServiceConfigDef.class);
                classByDiscriminatorValue.put("json_XXServiceConfigMap".toUpperCase(), JsonXXServiceConfigMap.class);
                classByDiscriminatorValue.put("json_XXServiceDefBase".toUpperCase(), JsonXXServiceDefBase.class);
                classByDiscriminatorValue.put("json_XXServiceResource".toUpperCase(), JsonXXServiceResource.class);
                classByDiscriminatorValue.put("json_XXServiceResourceElement".toUpperCase(), JsonXXServiceResourceElement.class);
                classByDiscriminatorValue.put("json_XXServiceResourceElementValue".toUpperCase(), JsonXXServiceResourceElementValue.class);
                classByDiscriminatorValue.put("json_XXTag".toUpperCase(), JsonXXTag.class);
                classByDiscriminatorValue.put("json_XXTagAttribute".toUpperCase(), JsonXXTagAttribute.class);
                classByDiscriminatorValue.put("json_XXTagAttributeDef".toUpperCase(), JsonXXTagAttributeDef.class);
                classByDiscriminatorValue.put("json_XXTagDef".toUpperCase(), JsonXXTagDef.class);
                classByDiscriminatorValue.put("json_XXTagResourceMap".toUpperCase(), JsonXXTagResourceMap.class);
                classByDiscriminatorValue.put("json_XXTrxLog".toUpperCase(), JsonXXTrxLog.class);
                classByDiscriminatorValue.put("json_XXUgsyncAuditInfo".toUpperCase(), JsonXXUgsyncAuditInfo.class);
                classByDiscriminatorValue.put("json_XXUser".toUpperCase(), JsonXXUser.class);
                classByDiscriminatorValue.put("json_XXUserPermission".toUpperCase(), JsonXXUserPermission.class);
                classByDiscriminatorValue.put("JsonXXDBBase".toUpperCase(), JsonXXDBBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonXXGlobalStateBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_XXGlobalState".toUpperCase(), JsonXXGlobalState.class);
                classByDiscriminatorValue.put("JsonXXGlobalStateBase".toUpperCase(), JsonXXGlobalStateBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonXXPolicyBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_XXPolicy".toUpperCase(), JsonXXPolicy.class);
                classByDiscriminatorValue.put("json_XXPolicyWithAssignedId".toUpperCase(), JsonXXPolicyWithAssignedId.class);
                classByDiscriminatorValue.put("JsonXXPolicyBase".toUpperCase(), JsonXXPolicyBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonXXRoleBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_XXRole".toUpperCase(), JsonXXRole.class);
                classByDiscriminatorValue.put("JsonXXRoleBase".toUpperCase(), JsonXXRoleBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonXXSecurityZoneBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_XXSecurityZone".toUpperCase(), JsonXXSecurityZone.class);
                classByDiscriminatorValue.put("JsonXXSecurityZoneBase".toUpperCase(), JsonXXSecurityZoneBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonXXServiceBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_XXService".toUpperCase(), JsonXXService.class);
                classByDiscriminatorValue.put("json_XXServiceWithAssignedId".toUpperCase(), JsonXXServiceWithAssignedId.class);
                classByDiscriminatorValue.put("JsonXXServiceBase".toUpperCase(), JsonXXServiceBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(JsonXXServiceDefBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("json_XXServiceDef".toUpperCase(), JsonXXServiceDef.class);
                classByDiscriminatorValue.put("json_XXServiceDefWithAssignedId".toUpperCase(), JsonXXServiceDefWithAssignedId.class);
                classByDiscriminatorValue.put("JsonXXServiceDefBase".toUpperCase(), JsonXXServiceDefBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0RangerBaseModelObject.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_groupInfo".toUpperCase(), XmlNs0GroupInfo.class);
                classByDiscriminatorValue.put("xml_ns0_rangerPolicy".toUpperCase(), XmlNs0RangerPolicy.class);
                classByDiscriminatorValue.put("xml_ns0_rangerRole".toUpperCase(), XmlNs0RangerRole.class);
                classByDiscriminatorValue.put("xml_ns0_rangerSecurityZone".toUpperCase(), XmlNs0RangerSecurityZone.class);
                classByDiscriminatorValue.put("xml_ns0_rangerService".toUpperCase(), XmlNs0RangerService.class);
                classByDiscriminatorValue.put("xml_ns0_rangerServiceDef".toUpperCase(), XmlNs0RangerServiceDef.class);
                classByDiscriminatorValue.put("xml_ns0_rangerServiceResource".toUpperCase(), XmlNs0RangerServiceResource.class);
                classByDiscriminatorValue.put("xml_ns0_rangerTag".toUpperCase(), XmlNs0RangerTag.class);
                classByDiscriminatorValue.put("xml_ns0_rangerTagDef".toUpperCase(), XmlNs0RangerTagDef.class);
                classByDiscriminatorValue.put("xml_ns0_rangerTagResourceMap".toUpperCase(), XmlNs0RangerTagResourceMap.class);
                classByDiscriminatorValue.put("xml_ns0_userInfo".toUpperCase(), XmlNs0UserInfo.class);
                classByDiscriminatorValue.put("XmlNs0RangerBaseModelObject".toUpperCase(), XmlNs0RangerBaseModelObject.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0RangerPolicy.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_rangerAuditPolicy".toUpperCase(), XmlNs0RangerAuditPolicy.class);
                classByDiscriminatorValue.put("XmlNs0RangerPolicy".toUpperCase(), XmlNs0RangerPolicy.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0RangerPolicyItem.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_rangerAuditPolicyItem".toUpperCase(), XmlNs0RangerAuditPolicyItem.class);
                classByDiscriminatorValue.put("xml_ns0_rangerDataMaskPolicyItem".toUpperCase(), XmlNs0RangerDataMaskPolicyItem.class);
                classByDiscriminatorValue.put("xml_ns0_rangerRowFilterPolicyItem".toUpperCase(), XmlNs0RangerRowFilterPolicyItem.class);
                classByDiscriminatorValue.put("XmlNs0RangerPolicyItem".toUpperCase(), XmlNs0RangerPolicyItem.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0RangerPolicyList.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_rangerExportPolicyList".toUpperCase(), XmlNs0RangerExportPolicyList.class);
                classByDiscriminatorValue.put("XmlNs0RangerPolicyList".toUpperCase(), XmlNs0RangerPolicyList.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0VList.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_rangerPluginInfoList".toUpperCase(), XmlNs0RangerPluginInfoList.class);
                classByDiscriminatorValue.put("xml_ns0_rangerPolicyList".toUpperCase(), XmlNs0RangerPolicyList.class);
                classByDiscriminatorValue.put("xml_ns0_rangerRoleList".toUpperCase(), XmlNs0RangerRoleList.class);
                classByDiscriminatorValue.put("xml_ns0_rangerSecurityZoneList".toUpperCase(), XmlNs0RangerSecurityZoneList.class);
                classByDiscriminatorValue.put("xml_ns0_rangerServiceDefList".toUpperCase(), XmlNs0RangerServiceDefList.class);
                classByDiscriminatorValue.put("xml_ns0_rangerServiceList".toUpperCase(), XmlNs0RangerServiceList.class);
                classByDiscriminatorValue.put("xml_ns0_VXAccessAuditList".toUpperCase(), XmlNs0VXAccessAuditList.class);
                classByDiscriminatorValue.put("xml_ns0_VXAssetList".toUpperCase(), XmlNs0VXAssetList.class);
                classByDiscriminatorValue.put("xml_ns0_VXAuditMapList".toUpperCase(), XmlNs0VXAuditMapList.class);
                classByDiscriminatorValue.put("xml_ns0_VXAuditRecordList".toUpperCase(), XmlNs0VXAuditRecordList.class);
                classByDiscriminatorValue.put("xml_ns0_VXAuthSessionList".toUpperCase(), XmlNs0VXAuthSessionList.class);
                classByDiscriminatorValue.put("xml_ns0_VXCredentialStoreList".toUpperCase(), XmlNs0VXCredentialStoreList.class);
                classByDiscriminatorValue.put("xml_ns0_VXGroupGroupList".toUpperCase(), XmlNs0VXGroupGroupList.class);
                classByDiscriminatorValue.put("xml_ns0_VXGroupList".toUpperCase(), XmlNs0VXGroupList.class);
                classByDiscriminatorValue.put("xml_ns0_VXGroupPermissionList".toUpperCase(), XmlNs0VXGroupPermissionList.class);
                classByDiscriminatorValue.put("xml_ns0_VXGroupUserList".toUpperCase(), XmlNs0VXGroupUserList.class);
                classByDiscriminatorValue.put("xml_ns0_VXKmsKeyList".toUpperCase(), XmlNs0VXKmsKeyList.class);
                classByDiscriminatorValue.put("xml_ns0_VXModuleDefList".toUpperCase(), XmlNs0VXModuleDefList.class);
                classByDiscriminatorValue.put("xml_ns0_VXPermMapList".toUpperCase(), XmlNs0VXPermMapList.class);
                classByDiscriminatorValue.put("xml_ns0_VXPermObjList".toUpperCase(), XmlNs0VXPermObjList.class);
                classByDiscriminatorValue.put("xml_ns0_VXPolicyExportAuditList".toUpperCase(), XmlNs0VXPolicyExportAuditList.class);
                classByDiscriminatorValue.put("xml_ns0_VXPolicyLabelList".toUpperCase(), XmlNs0VXPolicyLabelList.class);
                classByDiscriminatorValue.put("xml_ns0_VXPolicyList".toUpperCase(), XmlNs0VXPolicyList.class);
                classByDiscriminatorValue.put("xml_ns0_VXPortalUserList".toUpperCase(), XmlNs0VXPortalUserList.class);
                classByDiscriminatorValue.put("xml_ns0_VXRepositoryList".toUpperCase(), XmlNs0VXRepositoryList.class);
                classByDiscriminatorValue.put("xml_ns0_VXResourceList".toUpperCase(), XmlNs0VXResourceList.class);
                classByDiscriminatorValue.put("xml_ns0_VXStringList".toUpperCase(), XmlNs0VXStringList.class);
                classByDiscriminatorValue.put("xml_ns0_VXTrxLogList".toUpperCase(), XmlNs0VXTrxLogList.class);
                classByDiscriminatorValue.put("xml_ns0_VXUgsyncAuditInfoList".toUpperCase(), XmlNs0VXUgsyncAuditInfoList.class);
                classByDiscriminatorValue.put("xml_ns0_VXUserList".toUpperCase(), XmlNs0VXUserList.class);
                classByDiscriminatorValue.put("xml_ns0_VXUserPermissionList".toUpperCase(), XmlNs0VXUserPermissionList.class);
                classByDiscriminatorValue.put("XmlNs0VList".toUpperCase(), XmlNs0VList.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0RangerAccessResourceImpl.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_rangerTagResource".toUpperCase(), XmlNs0RangerTagResource.class);
                classByDiscriminatorValue.put("XmlNs0RangerAccessResourceImpl".toUpperCase(), XmlNs0RangerAccessResourceImpl.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0HttpEntity.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_responseEntity".toUpperCase(), XmlNs0ResponseEntity.class);
                classByDiscriminatorValue.put("XmlNs0HttpEntity".toUpperCase(), XmlNs0HttpEntity.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0ViewBaseBean.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_VEnum".toUpperCase(), XmlNs0VEnum.class);
                classByDiscriminatorValue.put("xml_ns0_VEnumElement".toUpperCase(), XmlNs0VEnumElement.class);
                classByDiscriminatorValue.put("xml_ns0_VList".toUpperCase(), XmlNs0VList.class);
                classByDiscriminatorValue.put("xml_ns0_VTrxLogAttr".toUpperCase(), XmlNs0VTrxLogAttr.class);
                classByDiscriminatorValue.put("xml_ns0_VXDataObject".toUpperCase(), XmlNs0VXDataObject.class);
                classByDiscriminatorValue.put("xml_ns0_VXLong".toUpperCase(), XmlNs0VXLong.class);
                classByDiscriminatorValue.put("xml_ns0_VXMessage".toUpperCase(), XmlNs0VXMessage.class);
                classByDiscriminatorValue.put("xml_ns0_VXPasswordChange".toUpperCase(), XmlNs0VXPasswordChange.class);
                classByDiscriminatorValue.put("xml_ns0_VXResponse".toUpperCase(), XmlNs0VXResponse.class);
                classByDiscriminatorValue.put("xml_ns0_VXString".toUpperCase(), XmlNs0VXString.class);
                classByDiscriminatorValue.put("XmlNs0ViewBaseBean".toUpperCase(), XmlNs0ViewBaseBean.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0VXDataObject.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_VXAccessAudit".toUpperCase(), XmlNs0VXAccessAudit.class);
                classByDiscriminatorValue.put("xml_ns0_VXAsset".toUpperCase(), XmlNs0VXAsset.class);
                classByDiscriminatorValue.put("xml_ns0_VXAuditMap".toUpperCase(), XmlNs0VXAuditMap.class);
                classByDiscriminatorValue.put("xml_ns0_VXAuthSession".toUpperCase(), XmlNs0VXAuthSession.class);
                classByDiscriminatorValue.put("xml_ns0_VXCredentialStore".toUpperCase(), XmlNs0VXCredentialStore.class);
                classByDiscriminatorValue.put("xml_ns0_VXGroup".toUpperCase(), XmlNs0VXGroup.class);
                classByDiscriminatorValue.put("xml_ns0_VXGroupGroup".toUpperCase(), XmlNs0VXGroupGroup.class);
                classByDiscriminatorValue.put("xml_ns0_VXGroupPermission".toUpperCase(), XmlNs0VXGroupPermission.class);
                classByDiscriminatorValue.put("xml_ns0_VXGroupUser".toUpperCase(), XmlNs0VXGroupUser.class);
                classByDiscriminatorValue.put("xml_ns0_VXGroupUserInfo".toUpperCase(), XmlNs0VXGroupUserInfo.class);
                classByDiscriminatorValue.put("xml_ns0_VXKmsKey".toUpperCase(), XmlNs0VXKmsKey.class);
                classByDiscriminatorValue.put("xml_ns0_VXModuleDef".toUpperCase(), XmlNs0VXModuleDef.class);
                classByDiscriminatorValue.put("xml_ns0_VXPermMap".toUpperCase(), XmlNs0VXPermMap.class);
                classByDiscriminatorValue.put("xml_ns0_VXPolicy".toUpperCase(), XmlNs0VXPolicy.class);
                classByDiscriminatorValue.put("xml_ns0_VXPolicyExportAudit".toUpperCase(), XmlNs0VXPolicyExportAudit.class);
                classByDiscriminatorValue.put("xml_ns0_VXPolicyLabel".toUpperCase(), XmlNs0VXPolicyLabel.class);
                classByDiscriminatorValue.put("xml_ns0_VXPortalUser".toUpperCase(), XmlNs0VXPortalUser.class);
                classByDiscriminatorValue.put("xml_ns0_VXRepository".toUpperCase(), XmlNs0VXRepository.class);
                classByDiscriminatorValue.put("xml_ns0_VXResource".toUpperCase(), XmlNs0VXResource.class);
                classByDiscriminatorValue.put("xml_ns0_VXTrxLog".toUpperCase(), XmlNs0VXTrxLog.class);
                classByDiscriminatorValue.put("xml_ns0_VXUgsyncAuditInfo".toUpperCase(), XmlNs0VXUgsyncAuditInfo.class);
                classByDiscriminatorValue.put("xml_ns0_VXUser".toUpperCase(), XmlNs0VXUser.class);
                classByDiscriminatorValue.put("xml_ns0_VXUserGroupInfo".toUpperCase(), XmlNs0VXUserGroupInfo.class);
                classByDiscriminatorValue.put("xml_ns0_VXUserPermission".toUpperCase(), XmlNs0VXUserPermission.class);
                classByDiscriminatorValue.put("XmlNs0VXDataObject".toUpperCase(), XmlNs0VXDataObject.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0XXAccessAuditBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_XXAccessAudit".toUpperCase(), XmlNs0XXAccessAudit.class);
                classByDiscriminatorValue.put("xml_ns0_XXAccessAuditV4".toUpperCase(), XmlNs0XXAccessAuditV4.class);
                classByDiscriminatorValue.put("xml_ns0_XXAccessAuditV5".toUpperCase(), XmlNs0XXAccessAuditV5.class);
                classByDiscriminatorValue.put("XmlNs0XXAccessAuditBase".toUpperCase(), XmlNs0XXAccessAuditBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0XXDBBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_XXAccessAuditBase".toUpperCase(), XmlNs0XXAccessAuditBase.class);
                classByDiscriminatorValue.put("xml_ns0_XXAccessTypeDef".toUpperCase(), XmlNs0XXAccessTypeDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXAccessTypeDefGrants".toUpperCase(), XmlNs0XXAccessTypeDefGrants.class);
                classByDiscriminatorValue.put("xml_ns0_XXAsset".toUpperCase(), XmlNs0XXAsset.class);
                classByDiscriminatorValue.put("xml_ns0_XXAuditMap".toUpperCase(), XmlNs0XXAuditMap.class);
                classByDiscriminatorValue.put("xml_ns0_XXAuthSession".toUpperCase(), XmlNs0XXAuthSession.class);
                classByDiscriminatorValue.put("xml_ns0_XXContextEnricherDef".toUpperCase(), XmlNs0XXContextEnricherDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXCredentialStore".toUpperCase(), XmlNs0XXCredentialStore.class);
                classByDiscriminatorValue.put("xml_ns0_XXDataMaskTypeDef".toUpperCase(), XmlNs0XXDataMaskTypeDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXEnumDef".toUpperCase(), XmlNs0XXEnumDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXEnumElementDef".toUpperCase(), XmlNs0XXEnumElementDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXGlobalStateBase".toUpperCase(), XmlNs0XXGlobalStateBase.class);
                classByDiscriminatorValue.put("xml_ns0_XXGroup".toUpperCase(), XmlNs0XXGroup.class);
                classByDiscriminatorValue.put("xml_ns0_XXGroupGroup".toUpperCase(), XmlNs0XXGroupGroup.class);
                classByDiscriminatorValue.put("xml_ns0_XXGroupPermission".toUpperCase(), XmlNs0XXGroupPermission.class);
                classByDiscriminatorValue.put("xml_ns0_XXGroupUser".toUpperCase(), XmlNs0XXGroupUser.class);
                classByDiscriminatorValue.put("xml_ns0_XXModuleDef".toUpperCase(), XmlNs0XXModuleDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXPermMap".toUpperCase(), XmlNs0XXPermMap.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyBase".toUpperCase(), XmlNs0XXPolicyBase.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyConditionDef".toUpperCase(), XmlNs0XXPolicyConditionDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyExportAudit".toUpperCase(), XmlNs0XXPolicyExportAudit.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyItem".toUpperCase(), XmlNs0XXPolicyItem.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyItemAccess".toUpperCase(), XmlNs0XXPolicyItemAccess.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyItemCondition".toUpperCase(), XmlNs0XXPolicyItemCondition.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyItemDataMaskInfo".toUpperCase(), XmlNs0XXPolicyItemDataMaskInfo.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyItemGroupPerm".toUpperCase(), XmlNs0XXPolicyItemGroupPerm.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyItemRowFilterInfo".toUpperCase(), XmlNs0XXPolicyItemRowFilterInfo.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyItemUserPerm".toUpperCase(), XmlNs0XXPolicyItemUserPerm.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyLabel".toUpperCase(), XmlNs0XXPolicyLabel.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyLabelMap".toUpperCase(), XmlNs0XXPolicyLabelMap.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyRefAccessType".toUpperCase(), XmlNs0XXPolicyRefAccessType.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyRefCondition".toUpperCase(), XmlNs0XXPolicyRefCondition.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyRefDataMaskType".toUpperCase(), XmlNs0XXPolicyRefDataMaskType.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyRefGroup".toUpperCase(), XmlNs0XXPolicyRefGroup.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyRefResource".toUpperCase(), XmlNs0XXPolicyRefResource.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyRefRole".toUpperCase(), XmlNs0XXPolicyRefRole.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyRefUser".toUpperCase(), XmlNs0XXPolicyRefUser.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyResource".toUpperCase(), XmlNs0XXPolicyResource.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyResourceMap".toUpperCase(), XmlNs0XXPolicyResourceMap.class);
                classByDiscriminatorValue.put("xml_ns0_XXPortalUser".toUpperCase(), XmlNs0XXPortalUser.class);
                classByDiscriminatorValue.put("xml_ns0_XXPortalUserRole".toUpperCase(), XmlNs0XXPortalUserRole.class);
                classByDiscriminatorValue.put("xml_ns0_XXRMSServiceResource".toUpperCase(), XmlNs0XXRMSServiceResource.class);
                classByDiscriminatorValue.put("xml_ns0_XXResource".toUpperCase(), XmlNs0XXResource.class);
                classByDiscriminatorValue.put("xml_ns0_XXResourceDef".toUpperCase(), XmlNs0XXResourceDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXRoleBase".toUpperCase(), XmlNs0XXRoleBase.class);
                classByDiscriminatorValue.put("xml_ns0_XXRoleRefGroup".toUpperCase(), XmlNs0XXRoleRefGroup.class);
                classByDiscriminatorValue.put("xml_ns0_XXRoleRefRole".toUpperCase(), XmlNs0XXRoleRefRole.class);
                classByDiscriminatorValue.put("xml_ns0_XXRoleRefUser".toUpperCase(), XmlNs0XXRoleRefUser.class);
                classByDiscriminatorValue.put("xml_ns0_XXSecurityZoneBase".toUpperCase(), XmlNs0XXSecurityZoneBase.class);
                classByDiscriminatorValue.put("xml_ns0_XXSecurityZoneRefGroup".toUpperCase(), XmlNs0XXSecurityZoneRefGroup.class);
                classByDiscriminatorValue.put("xml_ns0_XXSecurityZoneRefResource".toUpperCase(), XmlNs0XXSecurityZoneRefResource.class);
                classByDiscriminatorValue.put("xml_ns0_XXSecurityZoneRefService".toUpperCase(), XmlNs0XXSecurityZoneRefService.class);
                classByDiscriminatorValue.put("xml_ns0_XXSecurityZoneRefTagService".toUpperCase(), XmlNs0XXSecurityZoneRefTagService.class);
                classByDiscriminatorValue.put("xml_ns0_XXSecurityZoneRefUser".toUpperCase(), XmlNs0XXSecurityZoneRefUser.class);
                classByDiscriminatorValue.put("xml_ns0_XXServiceBase".toUpperCase(), XmlNs0XXServiceBase.class);
                classByDiscriminatorValue.put("xml_ns0_XXServiceConfigDef".toUpperCase(), XmlNs0XXServiceConfigDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXServiceConfigMap".toUpperCase(), XmlNs0XXServiceConfigMap.class);
                classByDiscriminatorValue.put("xml_ns0_XXServiceDefBase".toUpperCase(), XmlNs0XXServiceDefBase.class);
                classByDiscriminatorValue.put("xml_ns0_XXServiceResource".toUpperCase(), XmlNs0XXServiceResource.class);
                classByDiscriminatorValue.put("xml_ns0_XXServiceResourceElement".toUpperCase(), XmlNs0XXServiceResourceElement.class);
                classByDiscriminatorValue.put("xml_ns0_XXServiceResourceElementValue".toUpperCase(), XmlNs0XXServiceResourceElementValue.class);
                classByDiscriminatorValue.put("xml_ns0_XXTag".toUpperCase(), XmlNs0XXTag.class);
                classByDiscriminatorValue.put("xml_ns0_XXTagAttribute".toUpperCase(), XmlNs0XXTagAttribute.class);
                classByDiscriminatorValue.put("xml_ns0_XXTagAttributeDef".toUpperCase(), XmlNs0XXTagAttributeDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXTagDef".toUpperCase(), XmlNs0XXTagDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXTagResourceMap".toUpperCase(), XmlNs0XXTagResourceMap.class);
                classByDiscriminatorValue.put("xml_ns0_XXTrxLog".toUpperCase(), XmlNs0XXTrxLog.class);
                classByDiscriminatorValue.put("xml_ns0_XXUgsyncAuditInfo".toUpperCase(), XmlNs0XXUgsyncAuditInfo.class);
                classByDiscriminatorValue.put("xml_ns0_XXUser".toUpperCase(), XmlNs0XXUser.class);
                classByDiscriminatorValue.put("xml_ns0_XXUserPermission".toUpperCase(), XmlNs0XXUserPermission.class);
                classByDiscriminatorValue.put("XmlNs0XXDBBase".toUpperCase(), XmlNs0XXDBBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0XXGlobalStateBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_XXGlobalState".toUpperCase(), XmlNs0XXGlobalState.class);
                classByDiscriminatorValue.put("XmlNs0XXGlobalStateBase".toUpperCase(), XmlNs0XXGlobalStateBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0XXPolicyBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_XXPolicy".toUpperCase(), XmlNs0XXPolicy.class);
                classByDiscriminatorValue.put("xml_ns0_XXPolicyWithAssignedId".toUpperCase(), XmlNs0XXPolicyWithAssignedId.class);
                classByDiscriminatorValue.put("XmlNs0XXPolicyBase".toUpperCase(), XmlNs0XXPolicyBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0XXRoleBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_XXRole".toUpperCase(), XmlNs0XXRole.class);
                classByDiscriminatorValue.put("XmlNs0XXRoleBase".toUpperCase(), XmlNs0XXRoleBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0XXSecurityZoneBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_XXSecurityZone".toUpperCase(), XmlNs0XXSecurityZone.class);
                classByDiscriminatorValue.put("XmlNs0XXSecurityZoneBase".toUpperCase(), XmlNs0XXSecurityZoneBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0XXServiceBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_XXService".toUpperCase(), XmlNs0XXService.class);
                classByDiscriminatorValue.put("xml_ns0_XXServiceWithAssignedId".toUpperCase(), XmlNs0XXServiceWithAssignedId.class);
                classByDiscriminatorValue.put("XmlNs0XXServiceBase".toUpperCase(), XmlNs0XXServiceBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
          .registerTypeSelector(XmlNs0XXServiceDefBase.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("xml_ns0_XXServiceDef".toUpperCase(), XmlNs0XXServiceDef.class);
                classByDiscriminatorValue.put("xml_ns0_XXServiceDefWithAssignedId".toUpperCase(), XmlNs0XXServiceDefWithAssignedId.class);
                classByDiscriminatorValue.put("XmlNs0XXServiceDefBase".toUpperCase(), XmlNs0XXServiceDefBase.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, ""));
            }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .registerTypeAdapter(byte[].class, byteArrayAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
