/*
 * Ranger REST API
 * Apache Ranger is a framework to enable, monitor and manage comprehensive data security across the Hadoop platform. Apache Ranger currently provides a centralized security adminstration, fine grain access control and detailed auditing for user access within Apache Hadoop, Apache Hive, Apache HBase and other Apache components
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.JsonGrantRevokeRoleRequest;
import io.swagger.client.model.JsonRESTResponse;
import io.swagger.client.model.JsonRangerPluginInfo;
import io.swagger.client.model.JsonRangerPolicy;
import io.swagger.client.model.JsonRangerRole;
import io.swagger.client.model.JsonRangerSecurityZone;
import io.swagger.client.model.JsonRangerService;
import io.swagger.client.model.JsonRangerServiceDef;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicApIsv2Api
 */
@Ignore
public class PublicApIsv2ApiTest {

    private final PublicApIsv2Api api = new PublicApIsv2Api();

    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addUsersAndGroupsTest() throws Exception {
        Long id = null;
        Boolean body = null;
        JsonRangerRole response = api.addUsersAndGroups(id, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void applyPolicy2Test() throws Exception {
        JsonRangerPolicy body = null;
        JsonRangerPolicy response = api.applyPolicy2(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPolicy3Test() throws Exception {
        JsonRangerPolicy body = null;
        JsonRangerPolicy response = api.createPolicy3(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createRoleTest() throws Exception {
        Boolean createNonExistUserGroup = null;
        String serviceName = null;
        JsonRangerRole body = null;
        JsonRangerRole response = api.createRole(createNonExistUserGroup, serviceName, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createSecurityZoneTest() throws Exception {
        JsonRangerSecurityZone body = null;
        JsonRangerSecurityZone response = api.createSecurityZone(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createService2Test() throws Exception {
        JsonRangerService body = null;
        JsonRangerService response = api.createService2(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createServiceDef2Test() throws Exception {
        JsonRangerServiceDef body = null;
        JsonRangerServiceDef response = api.createServiceDef2(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePolicy3Test() throws Exception {
        Long id = null;
        api.deletePolicy3(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePolicyByNameTest() throws Exception {
        String policyname = null;
        String servicename = null;
        api.deletePolicyByName(policyname, servicename);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePolicyDeltas2Test() throws Exception {
        Integer days = null;
        api.deletePolicyDeltas2(days);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteRoleTest() throws Exception {
        String name = null;
        String execUser = null;
        String serviceName = null;
        api.deleteRole(name, execUser, serviceName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteRole_0Test() throws Exception {
        Long id = null;
        api.deleteRole_0(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSecurityZoneTest() throws Exception {
        String name = null;
        api.deleteSecurityZone(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSecurityZone_0Test() throws Exception {
        Long id = null;
        api.deleteSecurityZone_0(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteService2Test() throws Exception {
        Long id = null;
        api.deleteService2(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteServiceByNameTest() throws Exception {
        String name = null;
        api.deleteServiceByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteServiceDef2Test() throws Exception {
        Long id = null;
        api.deleteServiceDef2(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteServiceDefByNameTest() throws Exception {
        String name = null;
        api.deleteServiceDefByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTagDeltasTest() throws Exception {
        Integer days = null;
        api.deleteTagDeltas(days);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllRoleNamesTest() throws Exception {
        String execUser = null;
        String serviceName = null;
        List<String> response = api.getAllRoleNames(execUser, serviceName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllRolesTest() throws Exception {
        List<JsonRangerRole> response = api.getAllRoles();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllZonesTest() throws Exception {
        List<JsonRangerSecurityZone> response = api.getAllZones();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPluginsInfo2Test() throws Exception {
        List<JsonRangerPluginInfo> response = api.getPluginsInfo2();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPolicies2Test() throws Exception {
        List<JsonRangerPolicy> response = api.getPolicies2();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPoliciesForResource2Test() throws Exception {
        String serviceDefName = null;
        String serviceName = null;
        List<JsonRangerPolicy> response = api.getPoliciesForResource2(serviceDefName, serviceName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPolicy3Test() throws Exception {
        Long id = null;
        JsonRangerPolicy response = api.getPolicy3(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPolicyByNameTest() throws Exception {
        String policyname = null;
        String servicename = null;
        JsonRangerPolicy response = api.getPolicyByName(policyname, servicename);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws Exception {
        String name = null;
        String execUser = null;
        String serviceName = null;
        JsonRangerRole response = api.getRole(name, execUser, serviceName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRole_0Test() throws Exception {
        Long id = null;
        JsonRangerRole response = api.getRole_0(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSecurityZoneTest() throws Exception {
        String name = null;
        JsonRangerSecurityZone response = api.getSecurityZone(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSecurityZone_0Test() throws Exception {
        Long id = null;
        JsonRangerSecurityZone response = api.getSecurityZone_0(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getService2Test() throws Exception {
        Long id = null;
        JsonRangerService response = api.getService2(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServiceByName2Test() throws Exception {
        String name = null;
        JsonRangerService response = api.getServiceByName2(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServiceDef2Test() throws Exception {
        Long id = null;
        JsonRangerServiceDef response = api.getServiceDef2(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServiceDefByName2Test() throws Exception {
        String name = null;
        JsonRangerServiceDef response = api.getServiceDefByName2(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserRolesTest() throws Exception {
        String user = null;
        List<String> response = api.getUserRoles(user);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void grantRoleTest() throws Exception {
        String serviceName = null;
        JsonGrantRevokeRoleRequest body = null;
        JsonRESTResponse response = api.grantRole(serviceName, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void purgeEmptyPolicies2Test() throws Exception {
        String serviceName = null;
        api.purgeEmptyPolicies2(serviceName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeAdminFromUsersAndGroupsTest() throws Exception {
        Long id = null;
        List<String> body = null;
        JsonRangerRole response = api.removeAdminFromUsersAndGroups(id, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeUsersAndGroupsTest() throws Exception {
        Long id = null;
        List<String> body = null;
        JsonRangerRole response = api.removeUsersAndGroups(id, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void revokeRoleUsersAndRolesTest() throws Exception {
        String serviceName = null;
        JsonGrantRevokeRoleRequest body = null;
        JsonRESTResponse response = api.revokeRoleUsersAndRoles(serviceName, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchPolicies2Test() throws Exception {
        String servicename = null;
        List<JsonRangerPolicy> response = api.searchPolicies2(servicename);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchServiceDefsTest() throws Exception {
        List<JsonRangerServiceDef> response = api.searchServiceDefs();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchServicesTest() throws Exception {
        List<JsonRangerService> response = api.searchServices();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePolicy3Test() throws Exception {
        Long id = null;
        JsonRangerPolicy body = null;
        JsonRangerPolicy response = api.updatePolicy3(id, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePolicyByNameTest() throws Exception {
        String policyname = null;
        String servicename = null;
        JsonRangerPolicy body = null;
        JsonRangerPolicy response = api.updatePolicyByName(policyname, servicename, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateRoleTest() throws Exception {
        Long id = null;
        Boolean createNonExistUserGroup = null;
        JsonRangerRole body = null;
        JsonRangerRole response = api.updateRole(id, createNonExistUserGroup, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateSecurityZoneTest() throws Exception {
        Long id = null;
        JsonRangerSecurityZone body = null;
        JsonRangerSecurityZone response = api.updateSecurityZone(id, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateService2Test() throws Exception {
        Long id = null;
        JsonRangerService body = null;
        JsonRangerService response = api.updateService2(id, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateServiceByNameTest() throws Exception {
        String name = null;
        JsonRangerService body = null;
        JsonRangerService response = api.updateServiceByName(name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateServiceDef2Test() throws Exception {
        Long id = null;
        JsonRangerServiceDef body = null;
        JsonRangerServiceDef response = api.updateServiceDef2(id, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateServiceDefByNameTest() throws Exception {
        String name = null;
        JsonRangerServiceDef body = null;
        JsonRangerServiceDef response = api.updateServiceDefByName(name, body);

        // TODO: test validations
    }
    
}
