/*
 * Ranger REST API
 * Apache Ranger is a framework to enable, monitor and manage comprehensive data security across the Hadoop platform. Apache Ranger currently provides a centralized security adminstration, fine grain access control and detailed auditing for user access within Apache Hadoop, Apache Hive, Apache HBase and other Apache components
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import java.math.BigDecimal;
import java.io.File;
import io.swagger.client.model.JsonGrantRevokeRequest;
import io.swagger.client.model.JsonRESTResponse;
import io.swagger.client.model.JsonRangerPluginInfoList;
import io.swagger.client.model.JsonRangerPolicy;
import io.swagger.client.model.JsonRangerPolicyList;
import io.swagger.client.model.JsonRangerService;
import io.swagger.client.model.JsonRangerServiceDef;
import io.swagger.client.model.JsonRangerServiceDefList;
import io.swagger.client.model.JsonRangerServiceList;
import io.swagger.client.model.JsonResourceLookupContext;
import io.swagger.client.model.JsonResponseEntityOfList;
import io.swagger.client.model.JsonServicePolicies;
import io.swagger.client.model.JsonVXResponse;
import io.swagger.client.model.JsonVXString;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServiceRestApi
 */
@Ignore
public class ServiceRestApiTest {

    private final ServiceRestApi api = new ServiceRestApi();

    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void applyPolicyTest() throws Exception {
        JsonRangerPolicy body = null;
        JsonRangerPolicy response = api.applyPolicy(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkSSOTest() throws Exception {
        String response = api.checkSSO();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void countPoliciesTest() throws Exception {
        BigDecimal response = api.countPolicies();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void countServicesTest() throws Exception {
        BigDecimal response = api.countServices();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPolicyTest() throws Exception {
        JsonRangerPolicy body = null;
        JsonRangerPolicy response = api.createPolicy(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createServiceTest() throws Exception {
        JsonRangerService body = null;
        JsonRangerService response = api.createService(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createServiceDefTest() throws Exception {
        JsonRangerServiceDef body = null;
        JsonRangerServiceDef response = api.createServiceDef(body);

        // TODO: test validations
    }
    
    /**
     * Delete services/ repos associated with cluster.
     *
     * Delete services/ repos associated with cluster. Only users with Ranger UserAdmin OR KeyAdmin are allowed to access this API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteClusterServicesTest() throws Exception {
        String clusterName = null;
        JsonResponseEntityOfList response = api.deleteClusterServices(clusterName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePolicyTest() throws Exception {
        Long id = null;
        api.deletePolicy(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePolicyDeltasTest() throws Exception {
        Integer days = null;
        api.deletePolicyDeltas(days);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteServiceTest() throws Exception {
        Long id = null;
        api.deleteService(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteServiceDefTest() throws Exception {
        Long id = null;
        api.deleteServiceDef(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCSRFPropertiesTest() throws Exception {
        Map<String, Object> response = api.getCSRFProperties();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getMetricByTypeTest() throws Exception {
        String type = null;
        String response = api.getMetricByType(type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPluginsInfoTest() throws Exception {
        JsonRangerPluginInfoList response = api.getPluginsInfo();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPoliciesTest() throws Exception {
        JsonRangerPolicyList response = api.getPolicies();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPoliciesForResourceTest() throws Exception {
        String serviceDefName = null;
        String serviceName = null;
        List<JsonRangerPolicy> response = api.getPoliciesForResource(serviceDefName, serviceName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPoliciesInCsvTest() throws Exception {
        api.getPoliciesInCsv();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPoliciesInExcelTest() throws Exception {
        api.getPoliciesInExcel();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPoliciesInJsonTest() throws Exception {
        Boolean checkPoliciesExists = null;
        api.getPoliciesInJson(checkPoliciesExists);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPolicyTest() throws Exception {
        Long id = null;
        JsonRangerPolicy response = api.getPolicy(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPolicyForVersionNumberTest() throws Exception {
        Long policyId = null;
        Integer versionNo = null;
        JsonRangerPolicy response = api.getPolicyForVersionNumber(policyId, versionNo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPolicyFromEventTimeTest() throws Exception {
        JsonRangerPolicy response = api.getPolicyFromEventTime();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPolicyLabelsTest() throws Exception {
        List<String> response = api.getPolicyLabels();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPolicyVersionListTest() throws Exception {
        Long policyId = null;
        JsonVXString response = api.getPolicyVersionList(policyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSecureServicePoliciesIfUpdatedTest() throws Exception {
        String serviceName = null;
        String clusterName = null;
        Long lastActivationTime = null;
        Long lastKnownVersion = null;
        String pluginCapabilities = null;
        String pluginId = null;
        Boolean supportsPolicyDeltas = null;
        String zoneName = null;
        JsonServicePolicies response = api.getSecureServicePoliciesIfUpdated(serviceName, clusterName, lastActivationTime, lastKnownVersion, pluginCapabilities, pluginId, supportsPolicyDeltas, zoneName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServiceTest() throws Exception {
        Long id = null;
        JsonRangerService response = api.getService(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServiceByNameTest() throws Exception {
        String name = null;
        JsonRangerService response = api.getServiceByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServiceDefTest() throws Exception {
        Long id = null;
        JsonRangerServiceDef response = api.getServiceDef(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServiceDefByNameTest() throws Exception {
        String name = null;
        JsonRangerServiceDef response = api.getServiceDefByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServiceDefsTest() throws Exception {
        JsonRangerServiceDefList response = api.getServiceDefs();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServicePoliciesTest() throws Exception {
        Long id = null;
        JsonRangerPolicyList response = api.getServicePolicies(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServicePoliciesByNameTest() throws Exception {
        String name = null;
        JsonRangerPolicyList response = api.getServicePoliciesByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServicePoliciesIfUpdatedTest() throws Exception {
        String serviceName = null;
        String clusterName = null;
        Long lastActivationTime = null;
        Long lastKnownVersion = null;
        String pluginCapabilities = null;
        String pluginId = null;
        Boolean supportsPolicyDeltas = null;
        String zoneName = null;
        JsonServicePolicies response = api.getServicePoliciesIfUpdated(serviceName, clusterName, lastActivationTime, lastKnownVersion, pluginCapabilities, pluginId, supportsPolicyDeltas, zoneName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServicesTest() throws Exception {
        JsonRangerServiceList response = api.getServices();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void grantAccessTest() throws Exception {
        String serviceName = null;
        JsonGrantRevokeRequest body = null;
        JsonRESTResponse response = api.grantAccess(serviceName, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void importPoliciesFromFileTest() throws Exception {
        File fileDetail = null;
        File serviceMapStream = null;
        File uploadedInputStream = null;
        File zoneMapStream = null;
        String importType = null;
        Boolean isOverride = null;
        String body = null;
        api.importPoliciesFromFile(fileDetail, serviceMapStream, uploadedInputStream, zoneMapStream, importType, isOverride, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void lookupResourceTest() throws Exception {
        String serviceName = null;
        JsonResourceLookupContext body = null;
        List<String> response = api.lookupResource(serviceName, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void purgeEmptyPoliciesTest() throws Exception {
        String serviceName = null;
        api.purgeEmptyPolicies(serviceName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void revokeAccessTest() throws Exception {
        String serviceName = null;
        JsonGrantRevokeRequest body = null;
        JsonRESTResponse response = api.revokeAccess(serviceName, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void secureGrantAccessTest() throws Exception {
        String serviceName = null;
        JsonGrantRevokeRequest body = null;
        JsonRESTResponse response = api.secureGrantAccess(serviceName, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void secureRevokeAccessTest() throws Exception {
        String serviceName = null;
        JsonGrantRevokeRequest body = null;
        JsonRESTResponse response = api.secureRevokeAccess(serviceName, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePolicyTest() throws Exception {
        JsonRangerPolicy body = null;
        JsonRangerPolicy response = api.updatePolicy(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateServiceTest() throws Exception {
        JsonRangerService body = null;
        JsonRangerService response = api.updateService(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateServiceDefTest() throws Exception {
        JsonRangerServiceDef body = null;
        JsonRangerServiceDef response = api.updateServiceDef(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void validateConfigTest() throws Exception {
        JsonRangerService body = null;
        JsonVXResponse response = api.validateConfig(body);

        // TODO: test validations
    }
    
}
